import cv2
import numpy as np
import matplotlib.pyplot as plt 
from matplotlib import colors
from matplotlib.colors import hsv_to_rgb
from matplotlib import image
from sklearn.cluster import KMeans

def make_histogram(cluster):
    """
    Count the number of pixels in each cluster
    :param: KMeans cluster
    :return: numpy histogram
    """
    numLabels = np.arange(0, len(np.unique(cluster.labels_)) + 1)
    hist, _ = np.histogram(cluster.labels_, bins=numLabels)
    hist = hist.astype('float32')
    hist /= hist.sum()
    return hist

def make_bar(height, width, color):
    """
    Create an image of a given color
    :param: height of the image
    :param: width of the image
    :param: BGR pixel values of the color
    :return: tuple of bar, rgb values, and hsv values
    """
    bar = np.zeros((height, width, 3), np.uint8)
    bar[:] = color
    red, green, blue = int(color[2]), int(color[1]), int(color[0])
    hsv_bar = cv2.cvtColor(bar, cv2.COLOR_BGR2HSV)
    hue, sat, val = hsv_bar[0][0]
    return bar, (red, green, blue), (hue, sat, val)

def sort_hsvs(hsv_list):
    """
    Sort the list of HSV values
    :param hsv_list: List of HSV tuples
    :return: List of indexes, sorted by hue, then saturation, then value
    """
    bars_with_indexes = []
    for index, hsv_val in enumerate(hsv_list):
        bars_with_indexes.append((index, hsv_val[0], hsv_val[1], hsv_val[2]))
    bars_with_indexes.sort(key=lambda elem: (elem[1], elem[2], elem[3]))
    return [item[0] for item in bars_with_indexes]

img = cv2.imread('/Users/vijayrakeshchandra/Desktop/CS 61A/GamesCrafters/c4.png')
height, width, _ = np.shape(img)

image = img.reshape((height * width, 3))

num_clusters = 4
clusters = KMeans(n_clusters=num_clusters)
clusters.fit(image)

histogram = make_histogram(clusters)
combined = zip(histogram, clusters.cluster_centers_)
index_and_color = sorted(combined, key=lambda x: x[0], reverse=True)

bars = []
hsv_values = []
for index, rows in enumerate(index_and_color):
    bar, rgb, hsv = make_bar(100, 100, rows[1])
    print(f'Bar {index + 1}')
    print(f'  RGB values: {rgb}')
    print(f'  HSV values: {hsv}')
    hsv_values.append(hsv)
    bars.append(bar)

sorted_bar_indexes = sort_hsvs(hsv_values)
sorted_bars = [bars[idx] for idx in sorted_bar_indexes]

#cv2.imshow('Sorted by HSV values', np.hstack(sorted_bars))
#cv2.imshow(f'{num_clusters} Most Common Colors', np.hstack(bars))
#cv2.waitKey(0)
#cv2.destroyAllWindows()

# Bounds
def get_hsv_bounds(color, tolerance=10):
    # Function to compute lower and upper bounds for HSV given a color and tolerance
    lower_bound = np.array([color[0] - tolerance, max(0, color[1] - tolerance), max(0, color[2] - tolerance)])
    upper_bound = np.array([color[0] + tolerance, min(255, color[1] + tolerance), min(255, color[2] + tolerance)])
    return lower_bound, upper_bound

image = cv2.imread("/Users/vijayrakeshchandra/Desktop/CS 61A/GamesCrafters/c4.png")
# Convert the image to HSV color space
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

# Sort HSV colors to eliminate unneeded colors
piece_colors = sorted(hsv_values)[-2:]

# Define lower and upper bounds for each board piece
lower_blue, upper_blue = get_hsv_bounds(piece_colors[0])
lower_red, upper_red = get_hsv_bounds(piece_colors[1])

# Create a mask for each piece color
mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
mask_red = cv2.inRange(hsv, lower_red, upper_red)

# Apply mask
masked_blue = cv2.bitwise_and(image, image, mask=mask_blue)
masked_red = cv2.bitwise_and(image, image, mask=mask_red)

masked_image = cv2.bitwise_or(masked_blue, masked_red)

# Display new masked image
#cv2.imshow("Masked Image", masked_image)
#cv2.waitKey(0)
#cv2.destroyWindow("Masked Image")

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
gray = np.float32(gray)
dst = cv2.cornerHarris(gray,5,3,0.04)
ret, dst = cv2.threshold(dst,0.1*dst.max(),255,0)
dst = np.uint8(dst)
ret, labels, stats, centroids = cv2.connectedComponentsWithStats(dst)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
corners = cv2.cornerSubPix(gray,np.float32(centroids),(5,5),(-1,-1),criteria)
for i in range(1, len(corners)):
    print(corners[i])
img[dst>0.1*dst.max()]=[0,0,255]
row_spacing = (corners[4][0] - corners[1][0])//6
col_spacing = (corners[4][1] - corners[1][1])//6
print(row_spacing, col_spacing)

# of the points clicked on the image
def click_event(event, x, y, flags, params):
   if event == cv2.EVENT_LBUTTONDOWN:
      print(f'({x},{y})')
      
      # put coordinates as text on the image
      cv2.putText(img, f'({x},{y})',(x,y),
      cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
      
      # draw point on the image
      cv2.circle(img, (x,y), 3, (0,255,255), -1)

# create a window
cv2.namedWindow('Point Coordinates')

# bind the callback function to window
cv2.setMouseCallback('Point Coordinates', click_event)

# display the image
while True:
   cv2.imshow('Point Coordinates',img)
   k = cv2.waitKey(1) & 0xFF
   if k == 27:
      break
cv2.destroyAllWindows()
